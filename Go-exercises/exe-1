/*Exercise
Accept an HTML as raw text, ten parse it into documents
then call counting routine of us to detect and count words and images
*/

package main

import (
	"bytes"
	"fmt"
	"os"
	"strings"

	"golang.org/x/net/html"
)

var raw = `
<!DOCTYPE html>
<html>
  <body>
    <h1>My First Heading</h1>
      <p>My first paragraph.</p>
      <p>HTML <a href="https://www.w3schools.com/html/html_images.asp">images</a> are defined with the img tag:</p>
      <img src="xxx.jpg" width="104" height="142">
  </body>
</html>`

func visit(n *html.Node, pwords, ppics *int) {

	// if it's an element node, it should have

	if n.Type == html.TextNode {
		*pwords += len(strings.Fields(n.Data))
	} else if n.Type == html.ElementNode && n.Data == "img" {
		*ppics++
	}

	for c := n.FirstChild; c != nil; c = c.NextSibling {
		visit(c, pwords, ppics)
	}
}

func countWordsAndImages(doc *html.Node) (int, int) {
	var pwords, ppics int

	visit(doc, &pwords, &ppics)

	return pwords, ppics
}

// parsing the HTML program with the library read from the byte stream
// we have to import files like byte, os, and golang.org/x/net/html which is a standard library
func main() {
	doc, err := html.Parse(bytes.NewReader([]byte(raw))) // use sockets
	// Stderr is a standard error call library
	if err != nil {
		fmt.Fprintf(os.Stderr, "parse failed: %s\n", err)
		os.Exit(-1)
	}
	// display an account to read and write word and images
	pwords, ppics := countWordsAndImages(doc)

	fmt.Printf("%d words and %d images\n", pwords, ppics)
}
